<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bill's Thought</title><link>https://billguo.cc/</link><description>Recent content on Bill's Thought</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 06 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://billguo.cc/index.xml" rel="self" type="application/rss+xml"/><item><title>Archives</title><link>https://billguo.cc/archives/</link><pubDate>Mon, 06 Nov 2023 00:00:00 +0000</pubDate><guid>https://billguo.cc/archives/</guid><description/></item><item><title>Linux profile优先级</title><link>https://billguo.cc/p/linux-profile%E4%BC%98%E5%85%88%E7%BA%A7/</link><pubDate>Thu, 14 Apr 2022 23:16:42 +0800</pubDate><guid>https://billguo.cc/p/linux-profile%E4%BC%98%E5%85%88%E7%BA%A7/</guid><description>&lt;p>登入系统获取一个&lt;code>shell&lt;/code>进程时，读取环境变量有几步：&lt;/p>
&lt;ol>
&lt;li>首先读入全局变量 &lt;code>/etc/profile&lt;/code>，然后根据其内容读取额外的设定的文档，如 &lt;code>/etc/profile.d&lt;/code>和&lt;code>/etc/inputrc&lt;/code>&lt;/li>
&lt;li>然后根据不同用户读取&lt;code>~&lt;/code>路径下&lt;code>.bash_profile&lt;/code>，如果这读取不了就读取&lt;code>~/.bash_login&lt;/code>，这个也读取不了才会读取&lt;code>~/.profile&lt;/code>，这三个文档设定基本上是一样的，读取有优先关系&lt;/li>
&lt;li>然后根据用户账号读取&lt;code>~/.bashrc&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>其他&lt;/strong>&lt;br>
&lt;code>~/.profile&lt;/code>可以设定本用户专有的路径，环境变量等，它只在登入的时候执行一次&lt;br>
&lt;code>~/.bashrc&lt;/code>也是某用户专有设定文档，可以设定路径，设置&lt;code>alias&lt;/code>，每次&lt;code>shell script&lt;/code>的执行都会使用它一次&lt;/p></description></item><item><title>我的2019</title><link>https://billguo.cc/p/%E6%88%91%E7%9A%842019/</link><pubDate>Sat, 28 Dec 2019 14:26:29 +0800</pubDate><guid>https://billguo.cc/p/%E6%88%91%E7%9A%842019/</guid><description>&lt;h1 id="我的2019">我的2019&lt;/h1>
&lt;p>时间过得很快，一晃在杭州已经快三年半了。感觉这几年就没怎么好好总结过自己的工作和生活。从今年开始还是好好做一下这件事情，在脑子里边空想，和用文字记录下来始终是不一样的。回顾下过去，也给明年定一下目标，而不是单纯的&lt;code>mv 2019-todo.txt 2020-todo.txt&lt;/code>。&lt;/p>
&lt;h2 id="工作">工作&lt;/h2>
&lt;p>先说说工作上的事情。&lt;/p>
&lt;p>本来年初的时候开始着手进行新系统的开发任务，使用的技术栈也是目前市场上相对比较主流的，这样自己的所学刚好能够有输出的地方。&lt;code>Spring Boot&lt;/code>和&lt;code>Spring Cloud&lt;/code>的相关组件，以前只是自己写着玩，现在总算能付诸在实际的产品中了。中间还搞了一段时间的&lt;code>Vue&lt;/code>组件的封装，做了一下前端组件的自动生成框架。但是好景不长，没做多久就由于组织架构调整，又把我调回去了。又回到以前&lt;code>Spring MVC&lt;/code>，写&lt;code>Oracle&lt;/code>存储过程的日子。好刀不磨会生锈，技术学了不用，也是会忘记的。&lt;/p>
&lt;p>还好自己的相关工作也不是业务强相关的，也自己找了一些事情来做。包括老产品几个微服务的拆分，设计和实现，中间也学到了不少东西。倒也不是全无收获。&lt;/p>
&lt;h2 id="生活">生活&lt;/h2>
&lt;p>生活上可以说是糟透了。&lt;/p>
&lt;p>工作中的不如意确实是会一点点影响生活的。由于最近一两年都疏于锻炼，身体状态可以说每况愈下。九月份的时候，突发了阑尾炎。由于一些原因当时又不能做手术，连续挂了好几天的水。今年以来，肠胃也是频频出问题，确实影响平时的状态，而且还带有轻微的焦虑症，也是来来去去跑了好几次医院。这种状态真的让人后背发凉，一个是身体上的折磨，一个是心理的焦虑。年纪轻轻，但是却像个几十岁的老人，没有朝气，自己想想也觉得可怕。&lt;/p>
&lt;h2 id="明年的打算">明年的打算&lt;/h2>
&lt;ul>
&lt;li>回去割掉阑尾，检查一下肠胃，每天无论多忙也要适量运动。身体是革命的本钱，确实不是没有道理的。身体不断地给出警告，还不引起重视肯定不行。&lt;/li>
&lt;li>多阅读源码。这段时间以来，进步缓慢，不只是身体的原因，也有自己懈怠的原因。之前定好了什么什么计划，实际落实的却没有多少，明年争取有所改变。&lt;/li>
&lt;li>&lt;code>Java&lt;/code>相关的技术栈，几种&lt;code>MicroService&lt;/code>或者&lt;code>Serveless&lt;/code>的解决方案都了解一下。&lt;/li>
&lt;li>刷刷LeetCode，算法和数据结构不多多练习，忘记得太快了。&lt;/li>
&lt;li>还有就是，写博客的这个习惯，以前我也经常写这个东西，但是记录下的东西感觉都是写皮毛，或者搞些很基础的东西，就相当于在制造垃圾，不怎么整理然后就删掉了。现在想想，其实放到自己的博客里边又有什么关系呢，反正也没人来看，就当自己的笔记好了。&lt;/li>
&lt;li>每年其实也阅读了不少书籍，不管是技术类的还是社科类的，后面也单独弄一个文档记录下来，有些重要的可以用思维导图的方式自己终结归纳一下。学而时习之，不亦说乎？&lt;/li>
&lt;/ul></description></item><item><title>Base64编码原理探究</title><link>https://billguo.cc/p/base64%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/</link><pubDate>Wed, 10 Jul 2019 23:00:29 +0800</pubDate><guid>https://billguo.cc/p/base64%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/</guid><description>&lt;h4 id="base64背景">Base64背景&lt;/h4>
&lt;h5 id="维基百科的解释">维基百科的解释&lt;/h5>
&lt;blockquote>
&lt;p>&lt;strong>Base64&lt;/strong>是一种基于64个可打印字符来表示二进制数据的表示方法。由于2^6^=64，所以每6个bit为一个单元，对应某个可打印字符。3个字节有24个bit，对应于4个Base64单元，即3个字节可由4个可打印字符来表示。它可用来作为电子邮件的传输编码。在Base64中的可打印字符包括字母&lt;code>A-Z&lt;/code>、&lt;code>a-z&lt;/code>、数字&lt;code>0-9&lt;/code>，这样共有62个字符，此外两个可打印符号在不同的系统中而不同。&lt;/p>
&lt;/blockquote>
&lt;h5 id="由来及场景">由来及场景&lt;/h5>
&lt;blockquote>
&lt;p>在参数传输的过程中经常遇到的一种情况：使用全英文的没问题，但一旦涉及到中文就会出现乱码情况。与此类似，网络上传输的字符并不全是可打印的字符，比如二进制文件、图片等。Base64的出现就是为了解决此问题，它是基于64个可打印的字符来表示二进制的数据的一种方法。&lt;/p>
&lt;p>电子邮件刚问世的时候，只能传输英文，但后来随着用户的增加，中文、日文等文字的用户也有需求，但这些字符并不能被服务器或网关有效处理，因此Base64就登场了。随之，Base64在URL、Cookie、网页传输少量二进制文件中也有相应的使用。&lt;/p>
&lt;/blockquote>
&lt;h5 id="通常使用的字符">通常使用的字符&lt;/h5>
&lt;blockquote>
&lt;p>使用的字符包括大小写英文字母各26个、数字10个、加号&lt;code>+&lt;/code>和斜杠&lt;code>/&lt;/code>，共64个字符，等号&lt;code>=&lt;/code>用来作为后缀用途。&lt;/p>
&lt;/blockquote>
&lt;h4 id="算法简介">算法简介&lt;/h4>
&lt;h5 id="编码过程">编码过程&lt;/h5>
&lt;ul>
&lt;li>通常情况&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.loli.net/2019/08/19/wAI6OgLye95bpvM.png"
loading="lazy"
alt="1565001808032.png"
>&lt;/p>
&lt;ol>
&lt;li>将待编码的字符串中各个字母的ASCII码查出.&lt;/li>
&lt;li>将ASCII码转化为8位2进制表示，如文本&lt;em>M&lt;/em>的ASCII码为&lt;code>77&lt;/code>，用二进制表示则为&lt;code>01001101&lt;/code>.&lt;/li>
&lt;li>由于每6个bit为一个单元，所以每6个二进制位转化成一个十进制数，即编码结果的ASCII码. 如&lt;code>010011&lt;/code>计算可得&lt;code>19&lt;/code>.&lt;/li>
&lt;li>转化所有编码结果即可.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>当字节不能被3整除时:&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://i.loli.net/2019/08/19/NVT13aJqrZpcfzy.png"
loading="lazy"
alt="1565001979601.png"
>&lt;/p>
&lt;ol>
&lt;li>当无法被整除时，base64要在后面添加&lt;code>\0&lt;/code>凑齐&lt;code>3n&lt;/code>位，使二进制序列的长度成为&lt;code>24&lt;/code>的倍数(6和8的最小公倍数).&lt;/li>
&lt;li>由于不断补&lt;code>0&lt;/code>,对应产生的空字符将用等号&lt;code>=&lt;/code>填充，所以等号的个数必为0个，1个或2个.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;p>其他场景&lt;/p>
&lt;p>标准的Base64并不适合直接放在URL里传输，因为URL编码器会把标准Base64中的&lt;code>/&lt;/code>和&lt;code>+&lt;/code>字符变为形如&lt;code>%XX&lt;/code>的形式，而这些&lt;code>%&lt;/code>号在存入数据库时还需要再进行转换，因为ANSI SQL中已将&lt;code>%&lt;/code>号用作通配符。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">base64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">encode_str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">base64&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">b64encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ac&amp;gt;&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;utf-8&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;result: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">encode_str&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">url_safe_encode_str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">base64&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">urlsafe_b64encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ac&amp;gt;&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">encode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;utf-8&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;result: &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">url_safe_encode_str&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>运行结果：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Running&lt;span class="o">]&lt;/span> python -u &lt;span class="s2">&amp;#34;d:\urlsafe.py&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">result: b&lt;span class="s1">&amp;#39;YWM+&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">result: b&lt;span class="s1">&amp;#39;YWM-&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>Done&lt;span class="o">]&lt;/span> exited with &lt;span class="nv">code&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span> in 0.424 seconds
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h5 id="解码过程">解码过程&lt;/h5>
&lt;p>去掉末尾的等号&lt;code>=&lt;/code>。剩下的Base64字符，每8bit组成一个8bit字节，最后剩余不足8位的丢弃.&lt;/p>
&lt;h4 id="总结">总结&lt;/h4>
&lt;p>一般来说，由于使用base64编码后的长度通常是原字符长度的&lt;code>4/3&lt;/code>倍.
&lt;br>其实在补&lt;code>0&lt;/code>的问题上，我也疑惑过为什么要一直补到&lt;code>24&lt;/code>的倍数. 实际上这样做不仅是实现上的问题，而且当两个编码结果进行拼接之后，解码过程也能顺利进行.这样一想，应该就能很好理解了.&lt;/p></description></item><item><title>sublime text3 常用快捷键</title><link>https://billguo.cc/p/sublime-text3-%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link><pubDate>Fri, 16 Sep 2016 20:43:44 +0000</pubDate><guid>https://billguo.cc/p/sublime-text3-%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid><description>&lt;p>Sublime Text3 常用的一些快捷键操作：包括跳转，编辑，选择，查找等。&lt;/p>
&lt;hr>
&lt;h4 id="goto-anything-navigation">Goto Anything (Navigation)&lt;/h4>
&lt;ul>
&lt;li>Goto Anything: &lt;code>Ctrl + P&lt;/code>&lt;/li>
&lt;li>Goto Symbol: &lt;code>Ctrl + R&lt;/code>&lt;/li>
&lt;li>Goto Line: &lt;code>Ctrl + G&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="editing-text">Editing text&lt;/h4>
&lt;ul>
&lt;li>Insert line before / after - &lt;code>Ctrl + Shift + Return&lt;/code> / &lt;code>Ctrl + Return&lt;/code>&lt;/li>
&lt;li>Copy line / Paste from history - &lt;code>Ctrl + C&lt;/code> / &lt;code>Ctrl + K, Ctrl + V&lt;/code>&lt;/li>
&lt;li>Delete to beginning / end - &lt;code>Ctrl + Shift + Backspace&lt;/code> / &lt;code>Ctrl + K&lt;/code>&lt;/li>
&lt;li>Delete / Cut a line - &lt;code>Ctrl + Shift + K&lt;/code> / &lt;code>Ctrl + X&lt;/code>&lt;/li>
&lt;li>Soft Undo / Redo - &lt;code>Ctrl + U&lt;/code> / &lt;code>Ctrl + Shift + U&lt;/code>&lt;/li>
&lt;li>Upper / lower case - &lt;code>Ctrl + K, Ctrl + U&lt;/code> / &lt;code>Ctrl + K, Ctrl + L&lt;/code>&lt;/li>
&lt;li>Joining Lines - &lt;code>Ctrl + J&lt;/code>&lt;/li>
&lt;li>Bubble the line up / down - &lt;code>Ctrl + Shift + up&lt;/code> / &lt;code>Ctrl + Shift + down&lt;/code>&lt;/li>
&lt;li>Sort a line - &lt;code>F9&lt;/code>&lt;/li>
&lt;li>Duplicating a line - &lt;code>Ctrl + Shift + D&lt;/code>&lt;/li>
&lt;li>Indent - Unindent - &lt;code>Ctrl + ]&lt;/code>, &lt;code>Ctrl + [&lt;/code>&lt;/li>
&lt;li>Commenting a line - &lt;code>Ctrl + /&lt;/code>&lt;/li>
&lt;li>Close HTML tag - &lt;code>Alt + .&lt;/code>&lt;/li>
&lt;li>Wrap line at ruler - &lt;code>Alt + Q&lt;/code>&lt;/li>
&lt;li>Transpose - &lt;code>Ctrl + T&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="selection">Selection&lt;/h4>
&lt;ul>
&lt;li>Multiple selection - &lt;code>Ctrl + clicks at multiple places&lt;/code>&lt;/li>
&lt;li>Column Selection - &lt;code>Ctrl + Alt + Up&lt;/code> or &lt;code>Ctrl + Alt + Down&lt;/code> / &lt;code>Esc&lt;/code> for going back to single&lt;/li>
&lt;li>Split block of selection into multiple lines - &lt;code>Ctrl + Shift + L&lt;/code>&lt;/li>
&lt;li>Select word with multiple occurrences - &lt;code>Ctrl + D&lt;/code>&lt;/li>
&lt;li>Quick skip - &lt;code>Ctrl + K, Ctrl + D&lt;/code>&lt;/li>
&lt;li>Selecting a line - &lt;code>Ctrl + L&lt;/code>&lt;/li>
&lt;li>Expand selection to brackets - &lt;code>Ctrl + Shift + M&lt;/code>&lt;/li>
&lt;li>Expand selection to indentation - &lt;code>Ctrl + Shift + J&lt;/code>&lt;/li>
&lt;li>Expand selection to scope - &lt;code>Ctrl + Shift + Space&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="navigation">Navigation&lt;/h4>
&lt;ul>
&lt;li>Goto symbol in project - &lt;code>Ctrl + Shift + R&lt;/code>&lt;/li>
&lt;li>Goto definition - &lt;code>F12&lt;/code>&lt;/li>
&lt;li>Goto beginning / end of a line - &lt;code>Home&lt;/code> / &lt;code>End&lt;/code>&lt;/li>
&lt;li>Goto matching bracket - &lt;code>Ctrl + M&lt;/code>&lt;/li>
&lt;li>Move back / forward in history - &lt;code>Alt + -&lt;/code> / &lt;code>Alt + Shift + -&lt;/code>&lt;/li>
&lt;li>Code fold / unfold - &lt;code>Ctrl + Shift + [&lt;/code> / &lt;code>Ctrl + Shift + ]&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="find">Find&lt;/h4>
&lt;ul>
&lt;li>Find - &lt;code>Ctrl + F&lt;/code>&lt;/li>
&lt;li>Find next - &lt;code>F3&lt;/code>&lt;/li>
&lt;li>Find previous - &lt;code>Shift + F3&lt;/code>&lt;/li>
&lt;li>Find all - &lt;code>Alt + Return&lt;/code> (while find window is open)&lt;/li>
&lt;li>Use selection to find - &lt;code>Ctrl + E&lt;/code>&lt;/li>
&lt;li>Incremental find - &lt;code>Ctrl + I&lt;/code>&lt;/li>
&lt;li>Incremental find previous - &lt;code>Ctrl + Shift + I&lt;/code>&lt;/li>
&lt;li>Find all with incremental find - &lt;code>Alt + Return&lt;/code> (while the panel is open)&lt;/li>
&lt;li>Replace panel - &lt;code>Ctrl + H&lt;/code>&lt;/li>
&lt;li>Replace next - &lt;code>Ctrl + Shift + H&lt;/code>&lt;/li>
&lt;li>Replace all - &lt;code>Ctrl + Alt + Return&lt;/code> (Only when replace panel is open)&lt;/li>
&lt;li>Add selection to replace - &lt;code>Ctrl + Shift + E&lt;/code>&lt;/li>
&lt;li>Quick find - &lt;code>Ctrl + F3&lt;/code>&lt;/li>
&lt;li>Quick find previous - &lt;code>Ctrl + Shift + F3&lt;/code>&lt;/li>
&lt;li>Quick find all - &lt;code>Alt + F3&lt;/code>&lt;/li>
&lt;li>Find in project - &lt;code>Ctrl + Shift + F&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="others">Others&lt;/h4>
&lt;ul>
&lt;li>Opening User settings - &lt;code>^ + ,&lt;/code>&lt;/li>
&lt;li>Python Console - &lt;code>^ + Backticks&lt;/code>&lt;/li>
&lt;li>Command Palette - &lt;code>Ctrl + Shift + P&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>全排列问题(1)</title><link>https://billguo.cc/p/%E5%85%A8%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%981/</link><pubDate>Tue, 11 Aug 2015 14:52:17 +0800</pubDate><guid>https://billguo.cc/p/%E5%85%A8%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%981/</guid><description>&lt;p>全排列问题，指假如给定字符串，输出所有子串可能的排列的问题。解法比较多，递归非递归都可以。&lt;/p>
&lt;blockquote>
&lt;p>深度优先搜素（Depth First Search,DFS)
搜索算法的一种。是沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点 v 的所在边都己被探寻过，搜索将回溯到发现节点 v 的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。属于盲目搜索。&lt;/p>
&lt;/blockquote>
&lt;p>DFS 的基本模型：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">dfs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">step&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">判断边界&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">尝试每一种可能&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">继续下一步&lt;/span> &lt;span class="n">dfs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">step&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>关键代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">bool&lt;/span> &lt;span class="nf">dfs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">bunch&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">bLen&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">string&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bLen&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">string&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">size_type&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">bLen&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">vis&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vis&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">str&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">bunch&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">dfs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bunch&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bLen&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vis&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">substr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="c1">// End of for
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>全排列问题还有很多种变形问题，比如涉及去重等等。后面再具体补充。&lt;/p></description></item><item><title>About</title><link>https://billguo.cc/about/</link><pubDate>Tue, 14 Jul 2015 21:38:52 +0800</pubDate><guid>https://billguo.cc/about/</guid><description>&lt;p>Bill Guo&lt;/p>
&lt;ul>
&lt;li>邮箱：billguocs#gmail.com&lt;/li>
&lt;li>技能：&lt;code>Java&lt;/code> &lt;code>Spring&lt;/code> &lt;code>Javascript&lt;/code> &lt;code>Python&lt;/code> &lt;code>Go&lt;/code>&lt;/li>
&lt;li>简介：&lt;del>全栈&lt;/del>工程师，文史爱好者，终生学习践行者，常有三分热度，并无十分成果&lt;/li>
&lt;/ul></description></item><item><title>Links</title><link>https://billguo.cc/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://billguo.cc/links/</guid><description>&lt;!-- To use this feature, add `links` section to frontmatter.
This page's frontmatter:
```yaml
links:
- title: GitHub
description: GitHub is the world's largest software development platform.
website: https://github.com
image: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
```
`image` field accepts both local and external images. --></description></item><item><title>Search</title><link>https://billguo.cc/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://billguo.cc/search/</guid><description/></item></channel></rss>